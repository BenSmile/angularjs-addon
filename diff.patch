diff --git a/pom.xml b/pom.xml
index 74441b3..1feecaf 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,10 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
       <groupId>org.jboss</groupId>
       <artifactId>jboss-parent</artifactId>
-      <version>14</version>
+      <version>17</version>
    </parent>
    <groupId>org.jboss.forge.addon</groupId>
    <artifactId>angularjs</artifactId>
@@ -16,9 +17,9 @@
       <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>
 
       <version.forge.descriptors>0.0.4.Final</version.forge.descriptors>
-      <version.furnace>2.11.0.Final</version.furnace>
+      <version.furnace>2.15.3.Final</version.furnace>
+      <version.forge>2.15.2.Final</version.forge>
       <version.metawidget>2.4</version.metawidget>
-      <version.shrinkwrap.resolvers>2.1.0</version.shrinkwrap.resolvers>
 
       <!-- Build Info -->
       <forge.angularjs.scm.connection>scm:git:git://github.com/forge/angularjs-addon.git</forge.angularjs.scm.connection>
@@ -30,7 +31,7 @@
          <dependency>
             <groupId>org.jboss.forge</groupId>
             <artifactId>forge-bom</artifactId>
-            <version>${version.furnace}</version>
+            <version>${version.forge}</version>
             <type>pom</type>
             <scope>import</scope>
          </dependency>
@@ -58,6 +59,13 @@
       </dependency>
       <dependency>
          <groupId>org.jboss.forge.addon</groupId>
+         <artifactId>projects</artifactId>
+         <classifier>forge-addon</classifier>
+         <scope>provided</scope>
+      </dependency>
+
+      <dependency>
+         <groupId>org.jboss.forge.addon</groupId>
          <artifactId>templates</artifactId>
          <classifier>forge-addon</classifier>
          <scope>provided</scope>
@@ -93,13 +101,6 @@
          <scope>test</scope>
       </dependency>
       <dependency>
-         <groupId>org.jboss.shrinkwrap.resolver</groupId>
-         <artifactId>shrinkwrap-resolver-depchain</artifactId>
-         <version>${version.shrinkwrap.resolvers}</version>
-         <scope>test</scope>
-         <type>pom</type>
-      </dependency>
-      <dependency>
          <groupId>org.jboss.forge.furnace.test</groupId>
          <artifactId>furnace-test-harness</artifactId>
          <scope>test</scope>
@@ -109,6 +110,12 @@
          <artifactId>arquillian-furnace-classpath</artifactId>
          <scope>test</scope>
       </dependency>
+      <dependency>
+         <groupId>org.jsoup</groupId>
+         <artifactId>jsoup</artifactId>
+         <version>1.7.1</version>
+         <scope>test</scope>
+      </dependency>
    </dependencies>
    <build>
       <plugins>
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/ProjectHelper.java b/src/test/java/org/jboss/forge/addon/angularjs/ProjectHelper.java
index f028593..3ac626e 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/ProjectHelper.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/ProjectHelper.java
@@ -153,7 +153,7 @@ public class ProjectHelper
 
    public JavaResource createJPAEntity(Project project, String entityName) throws IOException
    {
-      String packageName = project.getFacet(MetadataFacet.class).getTopLevelPackage() + ".model";
+      String packageName = project.getFacet(JavaSourceFacet.class).getBasePackage() + ".model";
       return persistenceOperations.newEntity(project, entityName, packageName, GenerationType.AUTO);
    }
 
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/Deployments.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/Deployments.java
index 0c773c9..2b07429 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/Deployments.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/Deployments.java
@@ -1,75 +1,60 @@
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+
 import java.io.File;
 
 import org.jboss.forge.addon.angularjs.AngularScaffoldProvider;
 import org.jboss.forge.addon.angularjs.matchers.InspectionResultMatcher;
 import org.jboss.forge.addon.angularjs.util.RestResourceTypeVisitor;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
-import org.jboss.forge.furnace.repositories.AddonDependencyEntry;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
-import org.jboss.shrinkwrap.resolver.api.maven.Maven;
 
-public class Deployments {
+public class Deployments
+{
 
-	public static ForgeArchive getDeployment() {
-		return ShrinkWrap
-				.create(ForgeArchive.class)
-				.addClass(Deployments.class)
-                .addClass(InspectionResultMatcher.class)
-				.addAsLibrary(Maven.resolver().resolve("org.jsoup:jsoup:1.7.1").withTransitivity().asSingleFile())
-				.addPackage(AngularScaffoldProvider.class.getPackage())
-                .addClass(RestResourceTypeVisitor.class)
-				.addAsResources(Deployments.BASE_PACKAGE,
-						Deployments.NEW_ENTITY_CONTROLLER_JS,
-						Deployments.EDIT_ENTITY_CONTROLLER_JS,
-						Deployments.SEARCH_ENTITY_CONTROLLER_JS,
-						Deployments.ENTITY_FACTORY, Deployments.DETAIL_VIEW,
-						Deployments.SEARCH_VIEW,
-						Deployments.SEARCH_RESULTS_PAGINATOR_INCLUDE,
-						Deployments.SEARCH_RESULTS,
-						Deployments.SEARCH_FORM_INPUT,
-						Deployments.BASIC_PROPERTY_DETAIL_INCLUDE,
-						Deployments.LOOKUP_PROPERTY_DETAIL_INCLUDE,
-						Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE,
-						Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE,
-						Deployments.INDEX_PAGE,
-						Deployments.APP_JS)
-				.addBeansXML()
-				.addAsAddonDependencies(
-						AddonDependencyEntry
-								.create("org.jboss.forge.furnace.container:cdi"),
-						AddonDependencyEntry
-								.create("org.jboss.forge.addon:scaffold-spi"),
-						AddonDependencyEntry
-								.create("org.jboss.forge.addon:javaee"),
-						AddonDependencyEntry
-								.create("org.jboss.forge.addon:templates"),
-						AddonDependencyEntry
-								.create("org.jboss.forge.addon:text"),
-						AddonDependencyEntry
-								.create("org.jboss.forge.addon:convert"),
-						AddonDependencyEntry
-								.create("org.jboss.forge.addon:parser-java"));
-	}
+   public static AddonArchive getDeployment()
+   {
+      return ShrinkWrap
+               .create(AddonArchive.class)
+               .addClass(Deployments.class)
+               .addClass(InspectionResultMatcher.class)
+               .addPackage(AngularScaffoldProvider.class.getPackage())
+               .addClass(RestResourceTypeVisitor.class)
+               .addAsResources(Deployments.BASE_PACKAGE,
+                        Deployments.NEW_ENTITY_CONTROLLER_JS,
+                        Deployments.EDIT_ENTITY_CONTROLLER_JS,
+                        Deployments.SEARCH_ENTITY_CONTROLLER_JS,
+                        Deployments.ENTITY_FACTORY, Deployments.DETAIL_VIEW,
+                        Deployments.SEARCH_VIEW,
+                        Deployments.SEARCH_RESULTS_PAGINATOR_INCLUDE,
+                        Deployments.SEARCH_RESULTS,
+                        Deployments.SEARCH_FORM_INPUT,
+                        Deployments.BASIC_PROPERTY_DETAIL_INCLUDE,
+                        Deployments.LOOKUP_PROPERTY_DETAIL_INCLUDE,
+                        Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE,
+                        Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE,
+                        Deployments.INDEX_PAGE,
+                        Deployments.APP_JS)
+               .addBeansXML();
+   }
 
-	public static final Package BASE_PACKAGE = AngularScaffoldProvider.class
-			.getPackage();
-	public static final String BASE_PACKAGE_PATH = "/" + BASE_PACKAGE.getName().replace('.', '/') + File.separator;
-	public static final String NEW_ENTITY_CONTROLLER_JS = "scripts/controllers/newEntityController.js.ftl";
-	public static final String EDIT_ENTITY_CONTROLLER_JS = "scripts/controllers/editEntityController.js.ftl";
-	public static final String SEARCH_ENTITY_CONTROLLER_JS = "scripts/controllers/searchEntityController.js.ftl";
-	public static final String ENTITY_FACTORY = "scripts/services/entityFactory.js.ftl";
-	public static final String DETAIL_VIEW = "views/detail.html.ftl";
-	public static final String SEARCH_VIEW = "views/search.html.ftl";
-	public static final String SEARCH_RESULTS_PAGINATOR_INCLUDE = "views/includes/searchResultsPaginator.html.ftl";
-	public static final String SEARCH_RESULTS = "views/includes/searchResults.html.ftl";
-	public static final String SEARCH_FORM_INPUT = "views/includes/searchFormInput.html.ftl";
-	public static final String BASIC_PROPERTY_DETAIL_INCLUDE = "views/includes/basicPropertyDetail.html.ftl";
-	public static final String LOOKUP_PROPERTY_DETAIL_INCLUDE = "views/includes/lookupPropertyDetail.html.ftl";
-	public static final String N_TO_ONE_PROPERTY_DETAIL_INCLUDE = "views/includes/nToOnePropertyDetail.html.ftl";
-	public static final String N_TO_MANY_PROPERTY_DETAIL_INCLUDE = "views/includes/nToManyPropertyDetail.html.ftl";
-	public static final String INDEX_PAGE = "index.html.ftl";
-	public static final String APP_JS = "scripts/app.js.ftl";
+   public static final Package BASE_PACKAGE = AngularScaffoldProvider.class
+            .getPackage();
+   public static final String BASE_PACKAGE_PATH = "/" + BASE_PACKAGE.getName().replace('.', '/') + File.separator;
+   public static final String NEW_ENTITY_CONTROLLER_JS = "scripts/controllers/newEntityController.js.ftl";
+   public static final String EDIT_ENTITY_CONTROLLER_JS = "scripts/controllers/editEntityController.js.ftl";
+   public static final String SEARCH_ENTITY_CONTROLLER_JS = "scripts/controllers/searchEntityController.js.ftl";
+   public static final String ENTITY_FACTORY = "scripts/services/entityFactory.js.ftl";
+   public static final String DETAIL_VIEW = "views/detail.html.ftl";
+   public static final String SEARCH_VIEW = "views/search.html.ftl";
+   public static final String SEARCH_RESULTS_PAGINATOR_INCLUDE = "views/includes/searchResultsPaginator.html.ftl";
+   public static final String SEARCH_RESULTS = "views/includes/searchResults.html.ftl";
+   public static final String SEARCH_FORM_INPUT = "views/includes/searchFormInput.html.ftl";
+   public static final String BASIC_PROPERTY_DETAIL_INCLUDE = "views/includes/basicPropertyDetail.html.ftl";
+   public static final String LOOKUP_PROPERTY_DETAIL_INCLUDE = "views/includes/lookupPropertyDetail.html.ftl";
+   public static final String N_TO_ONE_PROPERTY_DETAIL_INCLUDE = "views/includes/nToOnePropertyDetail.html.ftl";
+   public static final String N_TO_MANY_PROPERTY_DETAIL_INCLUDE = "views/includes/nToManyPropertyDetail.html.ftl";
+   public static final String INDEX_PAGE = "index.html.ftl";
+   public static final String APP_JS = "scripts/app.js.ftl";
 
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsBasicPropertyTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsBasicPropertyTest.java
index b3eff27..e1cbf57 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsBasicPropertyTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsBasicPropertyTest.java
@@ -6,6 +6,30 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.IsNull.notNullValue;
+import static org.jboss.forge.addon.angularjs.TestHelpers.BASIC_STRING_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.BOOLEAN_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.DATETIME_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.DATE_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_ID_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_NAME;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_VERSION_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.NUMBER_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.NUMBER_PROP_WITH_MAX_VAL;
+import static org.jboss.forge.addon.angularjs.TestHelpers.NUMBER_PROP_WITH_MIN_VAL;
+import static org.jboss.forge.addon.angularjs.TestHelpers.STRING_PROP_WITH_MAX_LEN;
+import static org.jboss.forge.addon.angularjs.TestHelpers.STRING_PROP_WITH_MIN_LEN;
+import static org.jboss.forge.addon.angularjs.TestHelpers.TIME_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.createInspectionResultWrapper;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsEqual;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -14,9 +38,9 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
@@ -24,261 +48,276 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.metawidget.util.simple.StringUtils;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.Map;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNot.not;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.jboss.forge.addon.angularjs.TestHelpers.*;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML for basic properties of JPA entities are generated correctly.
  */
 @RunWith(Arquillian.class)
-public class FreemarkerClientPartialsBasicPropertyTest {
+public class FreemarkerClientPartialsBasicPropertyTest
+{
 
-    @Inject
-    private ResourceFactory resourceFactory;
+   @Inject
+   private ResourceFactory resourceFactory;
 
-    @Inject
-    private TemplateFactory processorFactory;
+   @Inject
+   private TemplateFactory processorFactory;
 
-    @Deployment
-    @Dependencies({
+   @Deployment
+   @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
             @AddonDependency(name = "org.jboss.forge.addon:text"),
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
-    })
-    public static ForgeArchive getDeployment()
-    {
-        return Deployments.getDeployment();
-    }
-    
-    @Test
-    public void testGenerateHiddenProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_VERSION_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output.trim(), IsEqual.equalTo(""));
-    }
-
-    @Test
-    public void testGenerateHiddenAndRequiredProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_ID_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output.trim(), IsEqual.equalTo(""));
-    }
-
-    @Test
-    public void testGenerateBasicStringProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, BASIC_STRING_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("fullName"));
-        assertThat(formInputElement.attr("type"), equalTo("text"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"fullName"));
-    }
-
-    @Test
-    public void testGenerateBasicStringPropertyWithMaxlength() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, STRING_PROP_WITH_MAX_LEN);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("fullName"));
-        assertThat(formInputElement.attr("type"), equalTo("text"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"fullName"));
-        assertThat(formInputElement.attr("ng-maxlength"), equalTo("100"));
-    }
-    
-    @Test
-    public void testGenerateBasicStringPropertyWithMinlength() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, STRING_PROP_WITH_MIN_LEN);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("fullName"));
-        assertThat(formInputElement.attr("type"), equalTo("text"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"fullName"));
-        assertThat(formInputElement.attr("ng-minlength"), equalTo("5"));
-    }
-    
-    @Test
-    public void testGenerateBasicNumberProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, NUMBER_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("score"));
-        assertThat(formInputElement.attr("type"), equalTo("number"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"score"));
-    }
-    
-    @Test
-    public void testGenerateBasicNumberPropertyWithMinConstraint() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, NUMBER_PROP_WITH_MIN_VAL);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("score"));
-        assertThat(formInputElement.attr("type"), equalTo("number"));
-        assertThat(formInputElement.attr("min"), equalTo("0"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"score"));
-    }
-    
-    @Test
-    public void testGenerateBasicNumberPropertyWithMaxConstraint() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, NUMBER_PROP_WITH_MAX_VAL);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("score"));
-        assertThat(formInputElement.attr("type"), equalTo("number"));
-        assertThat(formInputElement.attr("max"), equalTo("100"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"score"));
-    }
-    
-    @Test
-    public void testGenerateBasicDateProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, DATE_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group date");
-        assertThat(formInputElement.attr("id"), equalTo("dateOfBirth"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"dateOfBirth"));
-    }
-    
-    @Test
-    public void testGenerateBasicTimeProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, TIME_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group time");
-        assertThat(formInputElement.attr("id"), equalTo("alarmTime"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"alarmTime"));
-    }
-    
-    @Test
-    public void testGenerateBasicDatetimeProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, DATETIME_PROP);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group datetime");
-        assertThat(formInputElement.attr("id"), equalTo("auditTimestamp"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"auditTimestamp"));
-    }
-    
-    @Test
-    public void testGenerateBasicBooleanProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, BOOLEAN_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements formInputElement = html.select("div.form-group input");
-        assertThat(formInputElement.attr("id"), equalTo("optForMail"));
-        assertThat(formInputElement.attr("type"), equalTo("checkbox"));
-        assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME)+"."+"optForMail"));
-    }
+   })
+   public static AddonArchive getDeployment()
+   {
+      return Deployments.getDeployment();
+   }
+
+   @Test
+   public void testGenerateHiddenProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_VERSION_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output.trim(), IsEqual.equalTo(""));
+   }
+
+   @Test
+   public void testGenerateHiddenAndRequiredProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_ID_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output.trim(), IsEqual.equalTo(""));
+   }
+
+   @Test
+   public void testGenerateBasicStringProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, BASIC_STRING_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("fullName"));
+      assertThat(formInputElement.attr("type"), equalTo("text"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "fullName"));
+   }
+
+   @Test
+   public void testGenerateBasicStringPropertyWithMaxlength() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, STRING_PROP_WITH_MAX_LEN);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("fullName"));
+      assertThat(formInputElement.attr("type"), equalTo("text"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "fullName"));
+      assertThat(formInputElement.attr("ng-maxlength"), equalTo("100"));
+   }
+
+   @Test
+   public void testGenerateBasicStringPropertyWithMinlength() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, STRING_PROP_WITH_MIN_LEN);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("fullName"));
+      assertThat(formInputElement.attr("type"), equalTo("text"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "fullName"));
+      assertThat(formInputElement.attr("ng-minlength"), equalTo("5"));
+   }
+
+   @Test
+   public void testGenerateBasicNumberProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, NUMBER_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("score"));
+      assertThat(formInputElement.attr("type"), equalTo("number"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "score"));
+   }
+
+   @Test
+   public void testGenerateBasicNumberPropertyWithMinConstraint() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, NUMBER_PROP_WITH_MIN_VAL);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("score"));
+      assertThat(formInputElement.attr("type"), equalTo("number"));
+      assertThat(formInputElement.attr("min"), equalTo("0"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "score"));
+   }
+
+   @Test
+   public void testGenerateBasicNumberPropertyWithMaxConstraint() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, NUMBER_PROP_WITH_MAX_VAL);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("score"));
+      assertThat(formInputElement.attr("type"), equalTo("number"));
+      assertThat(formInputElement.attr("max"), equalTo("100"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "score"));
+   }
+
+   @Test
+   public void testGenerateBasicDateProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, DATE_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group date");
+      assertThat(formInputElement.attr("id"), equalTo("dateOfBirth"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "dateOfBirth"));
+   }
+
+   @Test
+   public void testGenerateBasicTimeProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, TIME_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group time");
+      assertThat(formInputElement.attr("id"), equalTo("alarmTime"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "alarmTime"));
+   }
+
+   @Test
+   public void testGenerateBasicDatetimeProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, DATETIME_PROP);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group datetime");
+      assertThat(formInputElement.attr("id"), equalTo("auditTimestamp"));
+      assertThat(formInputElement.attr("ng-model"),
+               equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "auditTimestamp"));
+   }
+
+   @Test
+   public void testGenerateBasicBooleanProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, BOOLEAN_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.BASIC_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements formInputElement = html.select("div.form-group input");
+      assertThat(formInputElement.attr("id"), equalTo("optForMail"));
+      assertThat(formInputElement.attr("type"), equalTo("checkbox"));
+      assertThat(formInputElement.attr("ng-model"), equalTo(StringUtils.camelCase(ENTITY_NAME) + "." + "optForMail"));
+   }
 
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsLookupPropertyTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsLookupPropertyTest.java
index 9297a1e..0ae060d 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsLookupPropertyTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsLookupPropertyTest.java
@@ -6,6 +6,21 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.IsNull.notNullValue;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_ID_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_NAME;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_VERSION_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENUM_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.createInspectionResultWrapper;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsEqual;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -14,9 +29,9 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
@@ -24,17 +39,6 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.metawidget.util.simple.StringUtils;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.Map;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNot.not;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.jboss.forge.addon.angularjs.TestHelpers.*;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML for Enum properties of JPA entities are generated correctly.
  */
@@ -48,7 +52,7 @@ public class FreemarkerClientPartialsLookupPropertyTest {
     private TemplateFactory processorFactory;
 
     @Deployment
-    @Dependencies({
+    @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
@@ -56,7 +60,7 @@ public class FreemarkerClientPartialsLookupPropertyTest {
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
     })
-    public static ForgeArchive getDeployment()
+    public static AddonArchive getDeployment()
     {
         return Deployments.getDeployment();
     }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToManyPropertyTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToManyPropertyTest.java
index 4c79cbf..17fbbe8 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToManyPropertyTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToManyPropertyTest.java
@@ -6,6 +6,22 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.IsNull.notNullValue;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_ID_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_NAME;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_VERSION_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.MANY_TO_MANY_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ONE_TO_MANY_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.createInspectionResultWrapper;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsEqual;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -14,124 +30,124 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.Map;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNot.not;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.jboss.forge.addon.angularjs.TestHelpers.*;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML for 1:M and M:M associations of JPA entities are generated correctly.
  */
 @RunWith(Arquillian.class)
-public class FreemarkerClientPartialsNToManyPropertyTest {
+public class FreemarkerClientPartialsNToManyPropertyTest
+{
 
-    @Inject
-    private ResourceFactory resourceFactory;
+   @Inject
+   private ResourceFactory resourceFactory;
 
-    @Inject
-    private TemplateFactory processorFactory;
+   @Inject
+   private TemplateFactory processorFactory;
 
-    @Deployment
-    @Dependencies({
+   @Deployment
+   @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
             @AddonDependency(name = "org.jboss.forge.addon:text"),
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
-    })
-    public static ForgeArchive getDeployment()
-    {
-        return Deployments.getDeployment();
-    }
-    
-    @Test
-    public void testGenerateHiddenProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_VERSION_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output.trim(), IsEqual.equalTo(""));
-    }
-    
-    @Test
-    public void testGenerateHiddenAndRequiredProperty() throws Exception {
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_ID_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output.trim(), IsEqual.equalTo(""));
-    }
-    
-    @Test
-    public void testGenerateOneToManyProperty() throws Exception {
-        String oneToManyProperty = "orders";
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ONE_TO_MANY_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements nToManyWidgetElement = html.select("div.form-group > div.col-sm-10");
-        assertThat(nToManyWidgetElement, notNullValue());
-
-        Elements selectElement = nToManyWidgetElement.select(" > select");
-        assertThat(selectElement.attr("id"), equalTo(oneToManyProperty));
-        assertThat(selectElement.attr("multiple"), notNullValue());
-        assertThat(selectElement.attr("ng-model"), equalTo(oneToManyProperty+"Selection"));
-        String collectionElement = oneToManyProperty.substring(0, 1);
-        String optionsExpression = collectionElement +".text for "+ collectionElement +" in " + oneToManyProperty + "SelectionList";
-        assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
-    }
-    
-    @Test
-    public void testGenerateManyToManyProperty() throws Exception {
-        String manyToManyProperty = "users";
-        Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, MANY_TO_MANY_PROP);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-        
-        Elements nToManyWidgetElement = html.select("div.form-group > div.col-sm-10");
-        assertThat(nToManyWidgetElement, notNullValue());
-
-        Elements selectElement = nToManyWidgetElement.select(" > select");
-        assertThat(selectElement.attr("id"), equalTo(manyToManyProperty));
-        assertThat(selectElement.attr("multiple"), notNullValue());
-        assertThat(selectElement.attr("ng-model"), equalTo(manyToManyProperty+"Selection"));
-        String collectionElement = manyToManyProperty.substring(0, 1);
-        String optionsExpression = collectionElement +".text for "+ collectionElement +" in " + manyToManyProperty + "SelectionList";
-        assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
-    }
+   })
+   public static AddonArchive getDeployment()
+   {
+      return Deployments.getDeployment();
+   }
+
+   @Test
+   public void testGenerateHiddenProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_VERSION_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output.trim(), IsEqual.equalTo(""));
+   }
+
+   @Test
+   public void testGenerateHiddenAndRequiredProperty() throws Exception
+   {
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ENTITY_ID_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output.trim(), IsEqual.equalTo(""));
+   }
+
+   @Test
+   public void testGenerateOneToManyProperty() throws Exception
+   {
+      String oneToManyProperty = "orders";
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, ONE_TO_MANY_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements nToManyWidgetElement = html.select("div.form-group > div.col-sm-10");
+      assertThat(nToManyWidgetElement, notNullValue());
+
+      Elements selectElement = nToManyWidgetElement.select(" > select");
+      assertThat(selectElement.attr("id"), equalTo(oneToManyProperty));
+      assertThat(selectElement.attr("multiple"), notNullValue());
+      assertThat(selectElement.attr("ng-model"), equalTo(oneToManyProperty + "Selection"));
+      String collectionElement = oneToManyProperty.substring(0, 1);
+      String optionsExpression = collectionElement + ".text for " + collectionElement + " in " + oneToManyProperty
+               + "SelectionList";
+      assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
+   }
+
+   @Test
+   public void testGenerateManyToManyProperty() throws Exception
+   {
+      String manyToManyProperty = "users";
+      Map<String, Object> root = createInspectionResultWrapper(ENTITY_NAME, MANY_TO_MANY_PROP);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_MANY_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements nToManyWidgetElement = html.select("div.form-group > div.col-sm-10");
+      assertThat(nToManyWidgetElement, notNullValue());
+
+      Elements selectElement = nToManyWidgetElement.select(" > select");
+      assertThat(selectElement.attr("id"), equalTo(manyToManyProperty));
+      assertThat(selectElement.attr("multiple"), notNullValue());
+      assertThat(selectElement.attr("ng-model"), equalTo(manyToManyProperty + "Selection"));
+      String collectionElement = manyToManyProperty.substring(0, 1);
+      String optionsExpression = collectionElement + ".text for " + collectionElement + " in " + manyToManyProperty
+               + "SelectionList";
+      assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
+   }
 
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToOnePropertyTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToOnePropertyTest.java
index 38ada3d..7f52a14 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToOnePropertyTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsNToOnePropertyTest.java
@@ -6,6 +6,17 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.IsNull.notNullValue;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsEqual;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -14,165 +25,163 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNot.not;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML for 1:1 and M:1 associations of JPA entities are generated correctly.
  */
 @RunWith(Arquillian.class)
-public class FreemarkerClientPartialsNToOnePropertyTest {
+public class FreemarkerClientPartialsNToOnePropertyTest
+{
 
-    @Inject
-    private ResourceFactory resourceFactory;
+   @Inject
+   private ResourceFactory resourceFactory;
 
-    @Inject
-    private TemplateFactory processorFactory;
+   @Inject
+   private TemplateFactory processorFactory;
 
-    @Deployment
-    @Dependencies({
+   @Deployment
+   @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
             @AddonDependency(name = "org.jboss.forge.addon:text"),
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
-    })
-    public static ForgeArchive getDeployment()
-    {
-        return Deployments.getDeployment();
-    }
-
-    @Test
-    public void testGenerateHiddenProperty() throws Exception {
-        Map<String, String> idProperties = new HashMap<String, String>();
-        idProperties.put("name", "id");
-        idProperties.put("identifier", "id");
-        idProperties.put("label", "Id");
-        idProperties.put("hidden", "true");
-        idProperties.put("type", "number");
-
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("property", idProperties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output.trim(), IsEqual.equalTo(""));
-    }
-
-    @Test
-    public void testGenerateHiddenAndRequiredProperty() throws Exception {
-        Map<String, String> idProperties = new HashMap<String, String>();
-        idProperties.put("name", "id");
-        idProperties.put("identifier", "id");
-        idProperties.put("label", "Id");
-        idProperties.put("hidden", "true");
-        idProperties.put("required", "true");
-        idProperties.put("type", "number");
-
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("property", idProperties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output.trim(), IsEqual.equalTo(""));
-    }
-
-    @Test
-    public void testGenerateOneToOneProperty() throws Exception {
-        Map<String, String> voucherProperties = new HashMap<String, String>();
-        String oneToOneProperty = "voucher";
-        voucherProperties.put("name", oneToOneProperty);
-        voucherProperties.put("identifier", oneToOneProperty);
-        voucherProperties.put("label", "Voucher");
-        voucherProperties.put("type", "com.example.scaffoldtester.model.DiscountVoucher");
-        voucherProperties.put("one-to-one", "true");
-        voucherProperties.put("simpleType", "DiscountVoucher");
-        voucherProperties.put("optionLabel", "id");
-
-        Map<String, Object> root = new HashMap<String, Object>();
-        String entityName = "SampleEntity";
-        root.put("entityName", entityName);
-        root.put("property", voucherProperties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-
-        Elements oneToOneWidgetElement = html.select("div.form-group > div.col-sm-10");
-        assertThat(oneToOneWidgetElement, notNullValue());
-
-        Elements selectElement = oneToOneWidgetElement.select(" > select");
-        assertThat(selectElement, notNullValue());
-        assertThat(selectElement.attr("id"), equalTo(oneToOneProperty));
-        String collectionElement = oneToOneProperty.substring(0, 1);
-        String optionsExpression = collectionElement + ".text for " + collectionElement + " in "
-                + oneToOneProperty + "SelectionList";
-        assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
-        assertThat(selectElement.attr("ng-model"), equalTo(oneToOneProperty + "Selection"));
-    }
-
-    @Test
-    public void testGenerateManyToOneProperty() throws Exception {
-        Map<String, String> customerProperties = new HashMap<String, String>();
-        String oneToOneProperty = "customer";
-        customerProperties.put("name", oneToOneProperty);
-        customerProperties.put("identifier", oneToOneProperty);
-        customerProperties.put("label", "Customer");
-        customerProperties.put("type", "com.example.scaffoldtester.model.Customer");
-        customerProperties.put("many-to-one", "true");
-        customerProperties.put("simpleType", "Customer");
-        customerProperties.put("optionLabel", "id");
-
-        Map<String, Object> root = new HashMap<String, Object>();
-        String entityName = "SampleEntity";
-        root.put("entityName", entityName);
-        root.put("property", customerProperties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-
-        Elements container = html.select("div.form-group");
-        assertThat(container, notNullValue());
-        assertThat(container.attr("ng-class"), not(equalTo("")));
-
-        Elements oneToOneWidgetElement = html.select("div.form-group > div.col-sm-10");
-        assertThat(oneToOneWidgetElement, notNullValue());
-
-        Elements selectElement = oneToOneWidgetElement.select(" > select");
-        assertThat(selectElement, notNullValue());
-        assertThat(selectElement.attr("id"), equalTo(oneToOneProperty));
-        String collectionElement = oneToOneProperty.substring(0, 1);
-        String optionsExpression = collectionElement + ".text for " + collectionElement + " in "
-                + oneToOneProperty + "SelectionList";
-        assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
-        assertThat(selectElement.attr("ng-model"), equalTo(oneToOneProperty + "Selection"));
-    }
+   })
+   public static AddonArchive getDeployment()
+   {
+      return Deployments.getDeployment();
+   }
+
+   @Test
+   public void testGenerateHiddenProperty() throws Exception
+   {
+      Map<String, String> idProperties = new HashMap<String, String>();
+      idProperties.put("name", "id");
+      idProperties.put("identifier", "id");
+      idProperties.put("label", "Id");
+      idProperties.put("hidden", "true");
+      idProperties.put("type", "number");
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("property", idProperties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output.trim(), IsEqual.equalTo(""));
+   }
+
+   @Test
+   public void testGenerateHiddenAndRequiredProperty() throws Exception
+   {
+      Map<String, String> idProperties = new HashMap<String, String>();
+      idProperties.put("name", "id");
+      idProperties.put("identifier", "id");
+      idProperties.put("label", "Id");
+      idProperties.put("hidden", "true");
+      idProperties.put("required", "true");
+      idProperties.put("type", "number");
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("property", idProperties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output.trim(), IsEqual.equalTo(""));
+   }
+
+   @Test
+   public void testGenerateOneToOneProperty() throws Exception
+   {
+      Map<String, String> voucherProperties = new HashMap<String, String>();
+      String oneToOneProperty = "voucher";
+      voucherProperties.put("name", oneToOneProperty);
+      voucherProperties.put("identifier", oneToOneProperty);
+      voucherProperties.put("label", "Voucher");
+      voucherProperties.put("type", "com.example.scaffoldtester.model.DiscountVoucher");
+      voucherProperties.put("one-to-one", "true");
+      voucherProperties.put("simpleType", "DiscountVoucher");
+      voucherProperties.put("optionLabel", "id");
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      String entityName = "SampleEntity";
+      root.put("entityName", entityName);
+      root.put("property", voucherProperties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements oneToOneWidgetElement = html.select("div.form-group > div.col-sm-10");
+      assertThat(oneToOneWidgetElement, notNullValue());
+
+      Elements selectElement = oneToOneWidgetElement.select(" > select");
+      assertThat(selectElement, notNullValue());
+      assertThat(selectElement.attr("id"), equalTo(oneToOneProperty));
+      String collectionElement = oneToOneProperty.substring(0, 1);
+      String optionsExpression = collectionElement + ".text for " + collectionElement + " in "
+               + oneToOneProperty + "SelectionList";
+      assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
+      assertThat(selectElement.attr("ng-model"), equalTo(oneToOneProperty + "Selection"));
+   }
+
+   @Test
+   public void testGenerateManyToOneProperty() throws Exception
+   {
+      Map<String, String> customerProperties = new HashMap<String, String>();
+      String oneToOneProperty = "customer";
+      customerProperties.put("name", oneToOneProperty);
+      customerProperties.put("identifier", oneToOneProperty);
+      customerProperties.put("label", "Customer");
+      customerProperties.put("type", "com.example.scaffoldtester.model.Customer");
+      customerProperties.put("many-to-one", "true");
+      customerProperties.put("simpleType", "Customer");
+      customerProperties.put("optionLabel", "id");
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      String entityName = "SampleEntity";
+      root.put("entityName", entityName);
+      root.put("property", customerProperties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.N_TO_ONE_PROPERTY_DETAIL_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements container = html.select("div.form-group");
+      assertThat(container, notNullValue());
+      assertThat(container.attr("ng-class"), not(equalTo("")));
+
+      Elements oneToOneWidgetElement = html.select("div.form-group > div.col-sm-10");
+      assertThat(oneToOneWidgetElement, notNullValue());
+
+      Elements selectElement = oneToOneWidgetElement.select(" > select");
+      assertThat(selectElement, notNullValue());
+      assertThat(selectElement.attr("id"), equalTo(oneToOneProperty));
+      String collectionElement = oneToOneProperty.substring(0, 1);
+      String optionsExpression = collectionElement + ".text for " + collectionElement + " in "
+               + oneToOneProperty + "SelectionList";
+      assertThat(selectElement.attr("ng-options"), equalTo(optionsExpression));
+      assertThat(selectElement.attr("ng-model"), equalTo(oneToOneProperty + "Selection"));
+   }
 
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchInputTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchInputTest.java
index 9340317..a38e0d5 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchInputTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchInputTest.java
@@ -6,6 +6,28 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.IsNull.notNullValue;
+import static org.jboss.forge.addon.angularjs.TestHelpers.BASIC_STRING_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.BOOLEAN_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.DATE_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_ID_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_NAME;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_VERSION_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.MANY_TO_MANY_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.MANY_TO_ONE_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.NUMBER_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ONE_TO_MANY_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ONE_TO_ONE_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.createInspectionResultWrapper;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsEqual;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -15,26 +37,15 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.Map;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNot.not;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.jboss.forge.addon.angularjs.TestHelpers.*;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML of the search page is generated correctly.
  */
@@ -48,7 +59,7 @@ public class FreemarkerClientPartialsSearchInputTest {
     private TemplateFactory processorFactory;
 
     @Deployment
-    @Dependencies({
+    @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
@@ -56,7 +67,7 @@ public class FreemarkerClientPartialsSearchInputTest {
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
     })
-    public static ForgeArchive getDeployment()
+    public static AddonArchive getDeployment()
     {
         return Deployments.getDeployment();
     }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsPaginatorTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsPaginatorTest.java
index 11d3355..b10f48e 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsPaginatorTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsPaginatorTest.java
@@ -6,6 +6,14 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsEqual;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -14,72 +22,72 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML the paginator in the search page is generated correctly.
  */
 @RunWith(Arquillian.class)
-public class FreemarkerClientPartialsSearchResultsPaginatorTest {
+public class FreemarkerClientPartialsSearchResultsPaginatorTest
+{
 
-    @Inject
-    private ResourceFactory resourceFactory;
+   @Inject
+   private ResourceFactory resourceFactory;
 
-    @Inject
-    private TemplateFactory processorFactory;
+   @Inject
+   private TemplateFactory processorFactory;
 
-    @Deployment
-    @Dependencies({
+   @Deployment
+   @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
             @AddonDependency(name = "org.jboss.forge.addon:text"),
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
-    })
-    public static ForgeArchive getDeployment()
-    {
-        return Deployments.getDeployment();
-    }
-    
-    private static String PAGINATOR_OUTPUT = "    <ul class=\"pagination pagination-centered\">\n" + 
-    	    "        <li ng-class=\"{disabled:currentPage == 0}\">\n" + 
-    		"            <a id=\"prev\" href ng-click=\"previous()\">«</a>\n" + 
-    		"        </li>\n" + 
-    		"        <li ng-repeat=\"n in pageRange\" ng-class=\"{active:currentPage == n}\" ng-click=\"setPage(n)\">\n" + 
-    		"            <a href ng-bind=\"n + 1\">1</a>\n" + 
-    		"        </li>\n" + 
-    		"        <li ng-class=\"{disabled: currentPage == (numberOfPages() - 1)}\">\n" + 
-    		"            <a id=\"next\" href ng-click=\"next()\">»</a>\n" + 
-    		"        </li>\n" + 
-    		"    </ul>\n";
-    
-    @Test
-    public void testGenerateSearchResultsPaginator() throws Exception {
-        Map<String, String> idProperties = new HashMap<String, String>();
-        idProperties.put("name", "id");
-        idProperties.put("hidden", "true");
-        idProperties.put("type", "number");
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("property", idProperties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS_PAGINATOR_INCLUDE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsEqual.equalTo(PAGINATOR_OUTPUT));
-    }
+   })
+   public static AddonArchive getDeployment()
+   {
+      return Deployments.getDeployment();
+   }
+
+   private static String PAGINATOR_OUTPUT = "    <ul class=\"pagination pagination-centered\">\n"
+            +
+            "        <li ng-class=\"{disabled:currentPage == 0}\">\n"
+            +
+            "            <a id=\"prev\" href ng-click=\"previous()\">«</a>\n"
+            +
+            "        </li>\n"
+            +
+            "        <li ng-repeat=\"n in pageRange\" ng-class=\"{active:currentPage == n}\" ng-click=\"setPage(n)\">\n"
+            +
+            "            <a href ng-bind=\"n + 1\">1</a>\n" +
+            "        </li>\n" +
+            "        <li ng-class=\"{disabled: currentPage == (numberOfPages() - 1)}\">\n" +
+            "            <a id=\"next\" href ng-click=\"next()\">»</a>\n" +
+            "        </li>\n" +
+            "    </ul>\n";
+
+   @Test
+   public void testGenerateSearchResultsPaginator() throws Exception
+   {
+      Map<String, String> idProperties = new HashMap<String, String>();
+      idProperties.put("name", "id");
+      idProperties.put("hidden", "true");
+      idProperties.put("type", "number");
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("property", idProperties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS_PAGINATOR_INCLUDE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsEqual.equalTo(PAGINATOR_OUTPUT));
+   }
 
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsTest.java
index 9c86b09..b9adc1f 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientPartialsSearchResultsTest.java
@@ -6,6 +6,19 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.forge.addon.resource.Resource;
@@ -13,9 +26,9 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
@@ -23,326 +36,334 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.metawidget.util.simple.StringUtils;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNot.not;
-import static org.hamcrest.core.StringContains.containsString;
-import static org.junit.Assert.assertThat;
-
 /**
  * Tests to verify that the generated HTML for the search results table in the search page is generated correctly.
  */
 @RunWith(Arquillian.class)
-public class FreemarkerClientPartialsSearchResultsTest {
+public class FreemarkerClientPartialsSearchResultsTest
+{
 
-    @Inject
-    private ResourceFactory resourceFactory;
+   @Inject
+   private ResourceFactory resourceFactory;
 
-    @Inject
-    private TemplateFactory processorFactory;
+   @Inject
+   private TemplateFactory processorFactory;
 
-    @Deployment
-    @Dependencies({
+   @Deployment
+   @AddonDependencies({
+            @AddonDependency(name = "org.jboss.forge.addon:projects"),
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
             @AddonDependency(name = "org.jboss.forge.addon:text"),
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
-    })
-    public static ForgeArchive getDeployment()
-    {
-        return Deployments.getDeployment();
-    }
-    
-    @Test
-    public void testGenerateHiddenProperty() throws Exception {
-        Map<String, String> idProperties = new HashMap<String, String>();
-        idProperties.put("name", "id");
-        idProperties.put("hidden", "true");
-        idProperties.put("type", "number");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(idProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(0, equalTo(headers.size()));
-    }
-    
-    @Test
-    public void testGenerateHiddenAndRequiredProperty() throws Exception {
-        Map<String, String> idProperties = new HashMap<String, String>();
-        idProperties.put("name", "id");
-        idProperties.put("hidden", "true");
-        idProperties.put("required", "true");
-        idProperties.put("type", "number");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(idProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(0, equalTo(headers.size()));
-    }
-    
-    @Test
-    public void testGenerateOneToManyProperty() throws Exception {
-        Map<String, String> ordersProperties = new HashMap<String, String>();
-        String oneToManyProperty = "orders";
-        ordersProperties.put("name", oneToManyProperty);
-        ordersProperties.put("type", "java.lang.String");
-        ordersProperties.put("n-to-many", "true");
-        ordersProperties.put("parameterized-type", "com.example.scaffoldtester.model.StoreOrder");
-        ordersProperties.put("type", "java.util.Set");
-        ordersProperties.put("simpleType", "StoreOrder");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(ordersProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(0, equalTo(headers.size()));
-    }
-    
-    @Test
-    public void testGenerateManyToManyProperty() throws Exception {
-        Map<String, String> usersProperties = new HashMap<String, String>();
-        String manyToManyProperty = "users";
-        usersProperties.put("name", manyToManyProperty);
-        usersProperties.put("type", "java.lang.String");
-        usersProperties.put("n-to-many", "true");
-        usersProperties.put("parameterized-type", "com.example.scaffoldtester.model.UserIdentity");
-        usersProperties.put("type", "java.util.Set");
-        usersProperties.put("simpleType", "UserIdentity");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(usersProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(0, equalTo(headers.size()));
-    }
-    
-    @Test
-    public void testGenerateBasicStringProperty() throws Exception {
-        Map<String, String> nameProperties = new HashMap<String, String>();
-        String basicStringProperty = "fullName";
-        nameProperties.put("name", basicStringProperty);
-        nameProperties.put("label", StringUtils.uncamelCase(basicStringProperty));
-        nameProperties.put("type", "java.lang.String");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(nameProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("pluralizedEntityName", "SampleEntities");
-        root.put("entityId", basicStringProperty);
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(headers.size(), equalTo(1));
-        assertThat(headers.text(), equalTo("Full Name"));
-        
-        Elements resultRows = html.select("table > tbody > tr");
-        assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
-        
-        Elements resultCells = resultRows.select(" > td");
-        assertThat(resultCells.size(), equalTo(1));
-        assertThat(resultCells.select("a").attr("href"), equalTo("#/"+"SampleEntities"+ "/edit/{{result.fullName}}"));
-        assertThat(resultCells.select("a").text(), equalTo("{{result.fullName}}"));
-    }
-    
-    @Test
-    public void testGenerateBasicNumberProperty() throws Exception {
-        Map<String, String> ageProperties = new HashMap<String, String>();
-        String basicNumberProperty = "age";
-        ageProperties.put("name", basicNumberProperty);
-        ageProperties.put("label", StringUtils.uncamelCase(basicNumberProperty));
-        ageProperties.put("type", "number");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(ageProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("pluralizedEntityName", "SampleEntities");
-        root.put("entityId", basicNumberProperty);
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(headers.size(), equalTo(1));
-        assertThat(headers.text(), equalTo("Age"));
-        
-        Elements resultRows = html.select("table > tbody > tr");
-        assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
-        
-        Elements resultCells = resultRows.select(" > td");
-        assertThat(resultCells.size(), equalTo(1));
-        assertThat(resultCells.select("a").attr("href"), equalTo("#/"+"SampleEntities"+ "/edit/{{result.age}}"));
-        assertThat(resultCells.select("a").text(), equalTo("{{result.age}}"));
-    }
-    
-    @Test
-    public void testGenerateBasicDateProperty() throws Exception {
-        Map<String, String> dateOfBirthProperties = new HashMap<String, String>();
-        String basicDateProperty = "dateOfBirth";
-        dateOfBirthProperties.put("name", basicDateProperty);
-        dateOfBirthProperties.put("label", StringUtils.uncamelCase(basicDateProperty));
-        dateOfBirthProperties.put("type","java.util.Date");
-        dateOfBirthProperties.put("datetime-type", "date");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(dateOfBirthProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("pluralizedEntityName", "SampleEntities");
-        root.put("entityId", basicDateProperty);
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(headers.size(), equalTo(1));
-        assertThat(headers.text(), equalTo("Date Of Birth"));
-        
-        Elements resultRows = html.select("table > tbody > tr");
-        assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
-        
-        Elements resultCells = resultRows.select(" > td");
-        assertThat(resultCells.size(), equalTo(1));
-        assertThat(resultCells.select("a").attr("href"), equalTo("#/"+"SampleEntities"+ "/edit/{{result.dateOfBirth}}"));
-        assertThat(resultCells.select("a").text(), equalTo("{{result.dateOfBirth| date:'mediumDate'}}"));
-    }
-    
-    @Test
-    public void testGenerateOneToOneProperty() throws Exception {
-        Map<String, String> voucherProperties = new HashMap<String, String>();
-        String oneToOneProperty = "voucher";
-        voucherProperties.put("name", oneToOneProperty);
-        voucherProperties.put("label", StringUtils.uncamelCase(oneToOneProperty));
-        voucherProperties.put("type", "com.example.scaffoldtester.model.DiscountVoucher");
-        voucherProperties.put("one-to-one", "true");
-        voucherProperties.put("simpleType", "DiscountVoucher");
-        voucherProperties.put("optionLabel", "id");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(voucherProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("pluralizedEntityName", "SampleEntities");
-        root.put("entityId", oneToOneProperty);
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(headers.size(), equalTo(1));
-        assertThat(headers.text(), equalTo("Voucher"));
-        
-        Elements resultRows = html.select("table > tbody > tr");
-        assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
-        
-        Elements resultCells = resultRows.select(" > td");
-        assertThat(resultCells.size(), equalTo(1));
-        assertThat(resultCells.select("a").attr("href"), equalTo("#/"+"SampleEntities"+ "/edit/{{result.voucher}}"));
-        assertThat(resultCells.select("a").text(), equalTo("{{result.voucher.id}}"));
-    }
-    
-    @Test
-    public void testGenerateManyToOneProperty() throws Exception {
-        Map<String, String> customerProperties = new HashMap<String, String>();
-        String manyToOneProperty = "customer";
-        customerProperties.put("name", manyToOneProperty);
-        customerProperties.put("label", StringUtils.uncamelCase(manyToOneProperty));
-        customerProperties.put("type", "com.example.scaffoldtester.model.Customer");
-        customerProperties.put("many-to-one", "true");
-        customerProperties.put("simpleType", "Customer");
-        customerProperties.put("optionLabel", "id");
-        
-        List<Map<String,? extends Object>> properties = new ArrayList<Map<String,? extends Object>>();
-        properties.add(customerProperties);
-        
-        Map<String, Object> root = new HashMap<String, Object>();
-        root.put("entityName", "SampleEntity");
-        root.put("pluralizedEntityName", "SampleEntities");
-        root.put("entityId", manyToOneProperty);
-        root.put("properties", properties);
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        Document html = Jsoup.parseBodyFragment(output);
-        assertThat(output.trim(), not(equalTo("")));
-        
-        Elements headers = html.select("table > thead > tr > th");
-        assertThat(headers.size(), equalTo(1));
-        assertThat(headers.text(), equalTo("Customer"));
-        
-        Elements resultRows = html.select("table > tbody > tr");
-        assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
-        
-        Elements resultCells = resultRows.select(" > td");
-        assertThat(resultCells.size(), equalTo(1));
-        assertThat(resultCells.select("a").attr("href"), equalTo("#/"+"SampleEntities"+ "/edit/{{result.customer}}"));
-        assertThat(resultCells.select("a").text(), equalTo("{{result.customer.id}}"));
-    }
+   })
+   public static AddonArchive getDeployment()
+   {
+      return Deployments.getDeployment();
+   }
+
+   @Test
+   public void testGenerateHiddenProperty() throws Exception
+   {
+      Map<String, String> idProperties = new HashMap<String, String>();
+      idProperties.put("name", "id");
+      idProperties.put("hidden", "true");
+      idProperties.put("type", "number");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(idProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(0, equalTo(headers.size()));
+   }
+
+   @Test
+   public void testGenerateHiddenAndRequiredProperty() throws Exception
+   {
+      Map<String, String> idProperties = new HashMap<String, String>();
+      idProperties.put("name", "id");
+      idProperties.put("hidden", "true");
+      idProperties.put("required", "true");
+      idProperties.put("type", "number");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(idProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(0, equalTo(headers.size()));
+   }
+
+   @Test
+   public void testGenerateOneToManyProperty() throws Exception
+   {
+      Map<String, String> ordersProperties = new HashMap<String, String>();
+      String oneToManyProperty = "orders";
+      ordersProperties.put("name", oneToManyProperty);
+      ordersProperties.put("type", "java.lang.String");
+      ordersProperties.put("n-to-many", "true");
+      ordersProperties.put("parameterized-type", "com.example.scaffoldtester.model.StoreOrder");
+      ordersProperties.put("type", "java.util.Set");
+      ordersProperties.put("simpleType", "StoreOrder");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(ordersProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(0, equalTo(headers.size()));
+   }
+
+   @Test
+   public void testGenerateManyToManyProperty() throws Exception
+   {
+      Map<String, String> usersProperties = new HashMap<String, String>();
+      String manyToManyProperty = "users";
+      usersProperties.put("name", manyToManyProperty);
+      usersProperties.put("type", "java.lang.String");
+      usersProperties.put("n-to-many", "true");
+      usersProperties.put("parameterized-type", "com.example.scaffoldtester.model.UserIdentity");
+      usersProperties.put("type", "java.util.Set");
+      usersProperties.put("simpleType", "UserIdentity");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(usersProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(0, equalTo(headers.size()));
+   }
+
+   @Test
+   public void testGenerateBasicStringProperty() throws Exception
+   {
+      Map<String, String> nameProperties = new HashMap<String, String>();
+      String basicStringProperty = "fullName";
+      nameProperties.put("name", basicStringProperty);
+      nameProperties.put("label", StringUtils.uncamelCase(basicStringProperty));
+      nameProperties.put("type", "java.lang.String");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(nameProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("pluralizedEntityName", "SampleEntities");
+      root.put("entityId", basicStringProperty);
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(headers.size(), equalTo(1));
+      assertThat(headers.text(), equalTo("Full Name"));
+
+      Elements resultRows = html.select("table > tbody > tr");
+      assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
+
+      Elements resultCells = resultRows.select(" > td");
+      assertThat(resultCells.size(), equalTo(1));
+      assertThat(resultCells.select("a").attr("href"), equalTo("#/" + "SampleEntities" + "/edit/{{result.fullName}}"));
+      assertThat(resultCells.select("a").text(), equalTo("{{result.fullName}}"));
+   }
+
+   @Test
+   public void testGenerateBasicNumberProperty() throws Exception
+   {
+      Map<String, String> ageProperties = new HashMap<String, String>();
+      String basicNumberProperty = "age";
+      ageProperties.put("name", basicNumberProperty);
+      ageProperties.put("label", StringUtils.uncamelCase(basicNumberProperty));
+      ageProperties.put("type", "number");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(ageProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("pluralizedEntityName", "SampleEntities");
+      root.put("entityId", basicNumberProperty);
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(headers.size(), equalTo(1));
+      assertThat(headers.text(), equalTo("Age"));
+
+      Elements resultRows = html.select("table > tbody > tr");
+      assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
+
+      Elements resultCells = resultRows.select(" > td");
+      assertThat(resultCells.size(), equalTo(1));
+      assertThat(resultCells.select("a").attr("href"), equalTo("#/" + "SampleEntities" + "/edit/{{result.age}}"));
+      assertThat(resultCells.select("a").text(), equalTo("{{result.age}}"));
+   }
+
+   @Test
+   public void testGenerateBasicDateProperty() throws Exception
+   {
+      Map<String, String> dateOfBirthProperties = new HashMap<String, String>();
+      String basicDateProperty = "dateOfBirth";
+      dateOfBirthProperties.put("name", basicDateProperty);
+      dateOfBirthProperties.put("label", StringUtils.uncamelCase(basicDateProperty));
+      dateOfBirthProperties.put("type", "java.util.Date");
+      dateOfBirthProperties.put("datetime-type", "date");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(dateOfBirthProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("pluralizedEntityName", "SampleEntities");
+      root.put("entityId", basicDateProperty);
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(headers.size(), equalTo(1));
+      assertThat(headers.text(), equalTo("Date Of Birth"));
+
+      Elements resultRows = html.select("table > tbody > tr");
+      assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
+
+      Elements resultCells = resultRows.select(" > td");
+      assertThat(resultCells.size(), equalTo(1));
+      assertThat(resultCells.select("a").attr("href"),
+               equalTo("#/" + "SampleEntities" + "/edit/{{result.dateOfBirth}}"));
+      assertThat(resultCells.select("a").text(), equalTo("{{result.dateOfBirth| date:'mediumDate'}}"));
+   }
+
+   @Test
+   public void testGenerateOneToOneProperty() throws Exception
+   {
+      Map<String, String> voucherProperties = new HashMap<String, String>();
+      String oneToOneProperty = "voucher";
+      voucherProperties.put("name", oneToOneProperty);
+      voucherProperties.put("label", StringUtils.uncamelCase(oneToOneProperty));
+      voucherProperties.put("type", "com.example.scaffoldtester.model.DiscountVoucher");
+      voucherProperties.put("one-to-one", "true");
+      voucherProperties.put("simpleType", "DiscountVoucher");
+      voucherProperties.put("optionLabel", "id");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(voucherProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("pluralizedEntityName", "SampleEntities");
+      root.put("entityId", oneToOneProperty);
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(headers.size(), equalTo(1));
+      assertThat(headers.text(), equalTo("Voucher"));
+
+      Elements resultRows = html.select("table > tbody > tr");
+      assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
+
+      Elements resultCells = resultRows.select(" > td");
+      assertThat(resultCells.size(), equalTo(1));
+      assertThat(resultCells.select("a").attr("href"), equalTo("#/" + "SampleEntities" + "/edit/{{result.voucher}}"));
+      assertThat(resultCells.select("a").text(), equalTo("{{result.voucher.id}}"));
+   }
+
+   @Test
+   public void testGenerateManyToOneProperty() throws Exception
+   {
+      Map<String, String> customerProperties = new HashMap<String, String>();
+      String manyToOneProperty = "customer";
+      customerProperties.put("name", manyToOneProperty);
+      customerProperties.put("label", StringUtils.uncamelCase(manyToOneProperty));
+      customerProperties.put("type", "com.example.scaffoldtester.model.Customer");
+      customerProperties.put("many-to-one", "true");
+      customerProperties.put("simpleType", "Customer");
+      customerProperties.put("optionLabel", "id");
+
+      List<Map<String, ? extends Object>> properties = new ArrayList<Map<String, ? extends Object>>();
+      properties.add(customerProperties);
+
+      Map<String, Object> root = new HashMap<String, Object>();
+      root.put("entityName", "SampleEntity");
+      root.put("pluralizedEntityName", "SampleEntities");
+      root.put("entityId", manyToOneProperty);
+      root.put("properties", properties);
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_RESULTS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      Document html = Jsoup.parseBodyFragment(output);
+      assertThat(output.trim(), not(equalTo("")));
+
+      Elements headers = html.select("table > thead > tr > th");
+      assertThat(headers.size(), equalTo(1));
+      assertThat(headers.text(), equalTo("Customer"));
+
+      Elements resultRows = html.select("table > tbody > tr");
+      assertThat(resultRows.attr("ng-repeat"), containsString("result in searchResults"));
+
+      Elements resultCells = resultRows.select(" > td");
+      assertThat(resultCells.size(), equalTo(1));
+      assertThat(resultCells.select("a").attr("href"), equalTo("#/" + "SampleEntities" + "/edit/{{result.customer}}"));
+      assertThat(resultCells.select("a").text(), equalTo("{{result.customer.id}}"));
+   }
 
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientTest.java
index 4b251da..ef7dd0e 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/freemarker/FreemarkerClientTest.java
@@ -6,6 +6,20 @@
  */
 package org.jboss.forge.addon.angularjs.tests.freemarker;
 
+import static org.jboss.forge.addon.angularjs.TestHelpers.BASIC_STRING_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_ID_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.ENTITY_VERSION_PROP;
+import static org.jboss.forge.addon.angularjs.TestHelpers.createEntityRootmap;
+import static org.jboss.forge.addon.angularjs.TestHelpers.createGlobalRootmap;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
 import org.hamcrest.core.IsNull;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -14,151 +28,159 @@ import org.jboss.forge.addon.resource.ResourceFactory;
 import org.jboss.forge.addon.templates.Template;
 import org.jboss.forge.addon.templates.TemplateFactory;
 import org.jboss.forge.addon.templates.freemarker.FreemarkerTemplate;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.inject.Inject;
-
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import static org.jboss.forge.addon.angularjs.TestHelpers.*;
-import static org.junit.Assert.assertThat;
-
 /**
- * Tests to verify that Freemarker templates that generate JavaScript work. Verifies that the templates dont error out during
- * processing. Functional tests verify whether the generated JavaScript actually work.
+ * Tests to verify that Freemarker templates that generate JavaScript work. Verifies that the templates dont error out
+ * during processing. Functional tests verify whether the generated JavaScript actually work.
  */
 @RunWith(Arquillian.class)
-public class FreemarkerClientTest {
+public class FreemarkerClientTest
+{
 
-    @Inject
-    private ResourceFactory resourceFactory;
+   @Inject
+   private ResourceFactory resourceFactory;
 
-    @Inject
-    private TemplateFactory processorFactory;
+   @Inject
+   private TemplateFactory processorFactory;
 
-    @Deployment
-    @Dependencies({
+   @Deployment
+   @AddonDependencies({
+            @AddonDependency(name = "org.jboss.forge.addon:projects"),
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
             @AddonDependency(name = "org.jboss.forge.addon:javaee"),
             @AddonDependency(name = "org.jboss.forge.addon:templates"),
             @AddonDependency(name = "org.jboss.forge.addon:text"),
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
-    })
-    public static ForgeArchive getDeployment()
-    {
-        return Deployments.getDeployment();
-    }
-    
-    @Test
-    public void testGenerateNewEntityController() throws Exception {
-        List<Map<String,String>> entityAttributeProperties = new ArrayList<Map<String,String>>();
-        entityAttributeProperties.add(ENTITY_ID_PROP);
-        entityAttributeProperties.add(ENTITY_VERSION_PROP);
-        entityAttributeProperties.add(BASIC_STRING_PROP);
-        Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.NEW_ENTITY_CONTROLLER_JS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-    
-    @Test
-    public void testGenerateEditEntityController() throws Exception {
-        List<Map<String,String>> entityAttributeProperties = new ArrayList<Map<String,String>>();
-        entityAttributeProperties.add(ENTITY_ID_PROP);
-        entityAttributeProperties.add(ENTITY_VERSION_PROP);
-        entityAttributeProperties.add(BASIC_STRING_PROP);
-        Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.EDIT_ENTITY_CONTROLLER_JS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-    
-    @Test
-    public void testGenerateSearchEntityController() throws Exception {
-        List<Map<String,String>> entityAttributeProperties = new ArrayList<Map<String,String>>();
-        entityAttributeProperties.add(ENTITY_ID_PROP);
-        entityAttributeProperties.add(ENTITY_VERSION_PROP);
-        entityAttributeProperties.add(BASIC_STRING_PROP);
-        Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_ENTITY_CONTROLLER_JS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-    
-    @Test
-    public void testGenerateEntityFactory() throws Exception {
-        List<Map<String,String>> entityAttributeProperties = new ArrayList<Map<String,String>>();
-        entityAttributeProperties.add(ENTITY_ID_PROP);
-        entityAttributeProperties.add(ENTITY_VERSION_PROP);
-        entityAttributeProperties.add(BASIC_STRING_PROP);
-        Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.ENTITY_FACTORY));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-
-    @Test
-    public void testGenerateDetailPartial() throws Exception {
-        List<Map<String,String>> entityAttributeProperties = new ArrayList<Map<String,String>>();
-        entityAttributeProperties.add(ENTITY_ID_PROP);
-        entityAttributeProperties.add(ENTITY_VERSION_PROP);
-        entityAttributeProperties.add(BASIC_STRING_PROP);
-        Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.DETAIL_VIEW));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-    
-    @Test
-    public void testGenerateSearchPartial() throws Exception {
-        List<Map<String,String>> entityAttributeProperties = new ArrayList<Map<String,String>>();
-        entityAttributeProperties.add(ENTITY_ID_PROP);
-        entityAttributeProperties.add(ENTITY_VERSION_PROP);
-        entityAttributeProperties.add(BASIC_STRING_PROP);
-        Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_VIEW));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-    
-    @Test
-    public void testGenerateIndex() throws Exception {
-        Map<String, Object> root = createGlobalRootmap();
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.INDEX_PAGE));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-
-    @Test
-    public void testGenerateAngularApplication() throws Exception {
-        Map<String, Object> root = createGlobalRootmap();
-
-        Resource<URL> templateResource = resourceFactory.create(getClass().getResource(Deployments.BASE_PACKAGE_PATH + Deployments.APP_JS));
-        Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
-        String output = processor.process(root);
-        assertThat(output, IsNull.notNullValue());
-    }
-    
+   })
+   public static AddonArchive getDeployment()
+   {
+      return Deployments.getDeployment();
+   }
+
+   @Test
+   public void testGenerateNewEntityController() throws Exception
+   {
+      List<Map<String, String>> entityAttributeProperties = new ArrayList<Map<String, String>>();
+      entityAttributeProperties.add(ENTITY_ID_PROP);
+      entityAttributeProperties.add(ENTITY_VERSION_PROP);
+      entityAttributeProperties.add(BASIC_STRING_PROP);
+      Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.NEW_ENTITY_CONTROLLER_JS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateEditEntityController() throws Exception
+   {
+      List<Map<String, String>> entityAttributeProperties = new ArrayList<Map<String, String>>();
+      entityAttributeProperties.add(ENTITY_ID_PROP);
+      entityAttributeProperties.add(ENTITY_VERSION_PROP);
+      entityAttributeProperties.add(BASIC_STRING_PROP);
+      Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.EDIT_ENTITY_CONTROLLER_JS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateSearchEntityController() throws Exception
+   {
+      List<Map<String, String>> entityAttributeProperties = new ArrayList<Map<String, String>>();
+      entityAttributeProperties.add(ENTITY_ID_PROP);
+      entityAttributeProperties.add(ENTITY_VERSION_PROP);
+      entityAttributeProperties.add(BASIC_STRING_PROP);
+      Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_ENTITY_CONTROLLER_JS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateEntityFactory() throws Exception
+   {
+      List<Map<String, String>> entityAttributeProperties = new ArrayList<Map<String, String>>();
+      entityAttributeProperties.add(ENTITY_ID_PROP);
+      entityAttributeProperties.add(ENTITY_VERSION_PROP);
+      entityAttributeProperties.add(BASIC_STRING_PROP);
+      Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.ENTITY_FACTORY));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateDetailPartial() throws Exception
+   {
+      List<Map<String, String>> entityAttributeProperties = new ArrayList<Map<String, String>>();
+      entityAttributeProperties.add(ENTITY_ID_PROP);
+      entityAttributeProperties.add(ENTITY_VERSION_PROP);
+      entityAttributeProperties.add(BASIC_STRING_PROP);
+      Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.DETAIL_VIEW));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateSearchPartial() throws Exception
+   {
+      List<Map<String, String>> entityAttributeProperties = new ArrayList<Map<String, String>>();
+      entityAttributeProperties.add(ENTITY_ID_PROP);
+      entityAttributeProperties.add(ENTITY_VERSION_PROP);
+      entityAttributeProperties.add(BASIC_STRING_PROP);
+      Map<String, Object> root = createEntityRootmap(entityAttributeProperties);
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.SEARCH_VIEW));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateIndex() throws Exception
+   {
+      Map<String, Object> root = createGlobalRootmap();
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.INDEX_PAGE));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
+   @Test
+   public void testGenerateAngularApplication() throws Exception
+   {
+      Map<String, Object> root = createGlobalRootmap();
+
+      Resource<URL> templateResource = resourceFactory.create(getClass().getResource(
+               Deployments.BASE_PACKAGE_PATH + Deployments.APP_JS));
+      Template processor = processorFactory.create(templateResource, FreemarkerTemplate.class);
+      String output = processor.process(root);
+      assertThat(output, IsNull.notNullValue());
+   }
+
 }
diff --git a/src/test/java/org/jboss/forge/addon/angularjs/tests/metawidget/InspectionResultProcessorTest.java b/src/test/java/org/jboss/forge/addon/angularjs/tests/metawidget/InspectionResultProcessorTest.java
index 736e94c..8f73ccb 100644
--- a/src/test/java/org/jboss/forge/addon/angularjs/tests/metawidget/InspectionResultProcessorTest.java
+++ b/src/test/java/org/jboss/forge/addon/angularjs/tests/metawidget/InspectionResultProcessorTest.java
@@ -27,9 +27,9 @@ import org.jboss.forge.addon.parser.java.facets.JavaSourceFacet;
 import org.jboss.forge.addon.parser.java.resources.JavaResource;
 import org.jboss.forge.addon.projects.Project;
 import org.jboss.forge.addon.scaffold.metawidget.MetawidgetInspectorFacade;
+import org.jboss.forge.arquillian.AddonDependencies;
 import org.jboss.forge.arquillian.AddonDependency;
-import org.jboss.forge.arquillian.Dependencies;
-import org.jboss.forge.arquillian.archive.ForgeArchive;
+import org.jboss.forge.arquillian.archive.AddonArchive;
 import org.jboss.forge.roaster.model.source.JavaClassSource;
 import org.junit.Before;
 import org.junit.Test;
@@ -45,7 +45,7 @@ public class InspectionResultProcessorTest
    private MetawidgetInspectorFacade metawidgetInspectorFacade;
 
    @Deployment
-   @Dependencies({
+   @AddonDependencies({
             @AddonDependency(name = "org.jboss.forge.addon:projects"),
             @AddonDependency(name = "org.jboss.forge.addon:maven"),
             @AddonDependency(name = "org.jboss.forge.addon:scaffold-spi"),
@@ -55,7 +55,7 @@ public class InspectionResultProcessorTest
             @AddonDependency(name = "org.jboss.forge.addon:convert"),
             @AddonDependency(name = "org.jboss.forge.addon:parser-java")
    })
-   public static ForgeArchive getDeployment()
+   public static AddonArchive getDeployment()
    {
       return Deployments.getDeployment();
    }
